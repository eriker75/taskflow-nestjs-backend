generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  name             String
  password         String
  phoneNumber      String?
  avatarUrl        String?
  jobTitle         String?
  createdAt        DateTime       @default(now())
  memberships      Membership[]
  projectsOwned    Project[]      @relation("ProjectsCreated")
  tasksAssigned    Task[]         @relation("AssignedTasks")
  notifications    Notification[]
  stripeCustomerId String?
  subscription     Subscription?  @relation("OwnerSubscription")
}

model Project {
  id              String        @id @default(uuid())
  name            String
  description     String?
  creator         User          @relation("ProjectsCreated", fields: [creatorId], references: [id])
  creatorId       String
  avatarUrl       String?
  createdAt       DateTime      @default(now())
  status          ProjectStatus @default(ACTIVO)
  dueDate         DateTime?
  progress        Int?
  budgetAllocated Float?
  budgetSpent     Float?
  teamName        String?
  lastUpdated     DateTime?
  coverImageUrl   String?
  memberships     Membership[]
  tasks           Task[]
}

model Membership {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  project   Project         @relation(fields: [projectId], references: [id])
  projectId String
  role      ParticipantRole
  joinedAt  DateTime        @default(now())

  @@unique([userId, projectId])
}

model Task {
  id                          String       @id @default(uuid())
  title                       String
  description                 String?
  status                      TaskStatus   @default(PENDING)
  priority                    TaskPriority
  dueDate                     DateTime?
  project                     Project      @relation(fields: [projectId], references: [id])
  projectId                   String
  assignedTo                  User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId                String?
  timeSpentHours              Float?
  estimatedHours              Float?
  createdAt                   DateTime     @default(now())
  imageUrl                    String?
  timerActive                 Boolean      @default(false)
  lastStartTime               DateTime?
  initialTimeSpentWhileActive Float?
}

model Subscription {
  id                   String   @id @default(uuid())
  stripeSubscriptionId String   @unique
  owner                User     @relation("OwnerSubscription", fields: [ownerId], references: [id])
  ownerId              String   @unique
  plan                 String
  status               String
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  read        Boolean  @default(false)
  timestamp   DateTime @default(now())
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  BLOCKED
  CANCELED
}

enum TaskPriority {
  BAJA
  MEDIA
  ALTA
  URGENTE
}

enum ParticipantRole {
  CREADOR
  MANAGER
  MIEMBRO
}

enum ProjectStatus {
  ACTIVO
  COMPLETADO
  PAUSADO
  CANCELADO
}
